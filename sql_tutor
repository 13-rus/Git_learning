# Для отображения конкретных полей их необходимо перечислить через запятую после SELECT.
# -- выбор определённых полей из таблицы
SELECT поле_1,
       поле_2,
       поле_3 ...
FROM таблица;<br>

# Для отображения нужного числа строк используйте операторы LIMIT и OFFSET.<br>
LIMIT выгружает требуемое число строк, а OFFSET пропускает их указанное количество.
# -- выбор определённых строк из таблицы
SELECT *
FROM таблица
LIMIT число выгружаемых строк OFFSET число пропускаемых строк; 

# Для выгрузки данных по определённому условию необходимо прописать его после оператора WHERE.
# -- фильтрация данных по условию
SELECT поле_1,
       поле_2 -- выбор полей
FROM таблица -- таблица, из которой выгружают данные
WHERE условие; -- условие для среза данных 
Для сравнения используют математические операторы:
> — больше;
< — меньше;
>= — больше или равно;
<= — меньше или равно;
= — равно;
!= — не равно.

# Для комбинации условий используют логические операторы OR, AND и NOT:
Оператор OR сработает, если выполняется хотя бы одно условие.
Оператор AND сработает, если выполняются все указанные условия.
Оператор NOT меняет условие на противоположное.
# -- фильтрация данных по условию
SELECT поле_1,
       поле_2 -- выбор полей
FROM таблица -- таблица, из которой выгружают данные
WHERE условие_1 OR условие_2 AND NOT условие_3; -- условия для среза данных 
Набор операторов OR можно заменить конструкцией с оператором IN:
# -- фильтрация, в которой все значения поля находятся в списке
SELECT *
FROM таблица
WHERE поле IN ('значение_1','значение_2','значение_3'); 

# Номер элемента даты (года, месяца, недели) можно выделить при помощи оператора EXTRACT:
# -- извлечение части даты
SELECT EXTRACT(часть_даты FROM поле) AS новое_поле_с_датой
FROM таблица; 
Начало элемента даты (например, первый день нужного месяца) можно выделить при помощи DATE_TRUNC:
-- усечение даты до части
SELECT DATE_TRUNC('часть_даты_до_которой_усекаем', поле) AS новое_поле_с_датой
FROM таблица; 
Параметры функции DATE_TRUNC:
'microseconds' — микросекунды;
'milliseconds' — миллисекунды;
'second' — секунда;
'minute' — минута;
'hour' — час;
'day' — день;
'week' — неделя;
'month' — месяц;
'quarter' — квартал;
'year' — год;
'decade' — десятилетие;
'century' — век.
Параметры функции EXTRACT:
MILLISECOND — миллисекунда;
SECOND — секунда;
MINUTE — минута;
HOUR — час;
DAY — день;
DOY — день года, выраженный
числом от 1 до 365 или 366, если
год високосный;
DOW — день недели, выраженный
числом от 0 до 6, где понедельник
— 1, воскресенье — 0;
ISODOW — день недели,
выраженный числом от 1 до 7, где
понедельник — 1, воскресенье —
7;
WEEK — неделя в году;
MONTH — месяц;
QUARTER — квартал;
YEAR — год;
CENTURY — век.
---

## С помощью агрегирующих функций выполняют операции с данными, которые содержит поле.
SELECT
COUNT(*), -- возвращает число записей в таблице
COUNT(column), -- возвращает число записей в поле column
COUNT(DISTINCT column),
/* возвращает количество уникальных значений
в поле column */
SUM(column), -- сумма значений в поле
AVG(column), -- среднее значений в поле
MIN(column), -- минимум значений в поле
MAX(column) -- максимум значений в поле
FROM таблица; 
## При помощи группировки рассчитывают агрегации для поля по параметрам, представленным в других полях. 
-- группировка данных
SELECT поле_1,
       поле_2,
       поле_3,
       АГРЕГИРУЮЩАЯ_ФУНКЦИЯ(поле)
FROM таблица
GROUP BY поле_1,
         поле_2,
         поле_3;
# -- ВАЖНО! Сколько полей без агрегации в SELECT, столько и должно быть в GROUP BY 
## Данные в таблицах можно сортировать. Числовые данные и даты сортируют по убыванию и возрастанию, а строковые — в алфавитном порядке и наоборот.
-- сортировка данных
SELECT поле_1,
       поле_2,
       поле_3,
       АГРЕГИРУЮЩАЯ_ФУНКЦИЯ(поле)
FROM таблица
ORDER BY поле_1, -- сортировка по возрастанию
         поле_2 DESC, -- сортировка по убыванию
         поле_3 ASC; -- сортировка по возрастанию 
Оператор HAVING — аналог WHERE, который служит для фильтрации данных после группировки и агрегации.
-- фильтрация после группировки
SELECT поле_1,
       поле_2,
       поле_3,
       АГРЕГИРУЮЩАЯ_ФУНКЦИЯ(поле)
FROM таблица
GROUP BY поле_1
HAVING АГРЕГИРУЮЩАЯ_ФУНКЦИЯ(поле) > n;
# -- ВАЖНО! WHERE работает только с изначальными данными, 
# -- HAVING — только с агрегированными 

